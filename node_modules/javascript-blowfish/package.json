{
  "_args": [
    [
      {
        "raw": "agorlov/javascript-blowfish",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "agorlov/javascript-blowfish",
        "spec": "github:agorlov/javascript-blowfish",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:agorlov/javascript-blowfish.git",
          "sshUrl": "git+ssh://git@github.com/agorlov/javascript-blowfish.git",
          "httpsUrl": "git+https://github.com/agorlov/javascript-blowfish.git",
          "gitUrl": "git://github.com/agorlov/javascript-blowfish.git",
          "shortcut": "github:agorlov/javascript-blowfish",
          "directUrl": "https://raw.githubusercontent.com/agorlov/javascript-blowfish/master/package.json"
        }
      },
      "/home/ec2-user/environment"
    ]
  ],
  "_from": "agorlov/javascript-blowfish",
  "_id": "javascript-blowfish@1.0.5",
  "_inCache": true,
  "_location": "/javascript-blowfish",
  "_phantomChildren": {},
  "_requested": {
    "raw": "agorlov/javascript-blowfish",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "agorlov/javascript-blowfish",
    "spec": "github:agorlov/javascript-blowfish",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:agorlov/javascript-blowfish.git",
      "sshUrl": "git+ssh://git@github.com/agorlov/javascript-blowfish.git",
      "httpsUrl": "git+https://github.com/agorlov/javascript-blowfish.git",
      "gitUrl": "git://github.com/agorlov/javascript-blowfish.git",
      "shortcut": "github:agorlov/javascript-blowfish",
      "directUrl": "https://raw.githubusercontent.com/agorlov/javascript-blowfish/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git://github.com/agorlov/javascript-blowfish.git#d8c126defd1a82400560780ebf6ebf8c66831ea9",
  "_shasum": "c4c3f6a23abc8af9db4d804777d9e13a6299e67f",
  "_shrinkwrap": null,
  "_spec": "agorlov/javascript-blowfish",
  "_where": "/home/ec2-user/environment",
  "author": {
    "name": "agorlov"
  },
  "bugs": {
    "url": "https://github.com/agorlov/javascript-blowfish/issues"
  },
  "dependencies": {},
  "description": "Blowfish encryption library Javascript, jquery,coffeescript (blowfish.js)",
  "devDependencies": {},
  "gitHead": "d8c126defd1a82400560780ebf6ebf8c66831ea9",
  "homepage": "https://github.com/agorlov/javascript-blowfish#readme",
  "keywords": [
    "node",
    "js",
    "blowfish",
    "encryption",
    "decryption",
    "encypher",
    "decypher",
    "javascript"
  ],
  "license": "MIT",
  "main": "Blowfish.node.js",
  "name": "javascript-blowfish",
  "optionalDependencies": {},
  "readme": "javascript-blowfish\n===================\n\nBlowfish encryption library Javascript, jquery,coffeescript (blowfish.js)\n\nWorks well both in old and new browsers.\n\nBlowfish is block cipher, block length is **8 byte**.\n\nOnline [DEMO of javascript-blowfish](http://plnkr.co/edit/CbOyJKaRcspIAokgiomT?p=preview).\n\nA key advantage of the library is that it **works correctly with strings in UTF-8**.\n\n### Text data encryption (ASCII/text)\n\nIt you want to encrypt **string information** (like text-message, or json, xml):\nuse _trimZeros_ method (see bellow Example 1).\n\n#### Example: ECB mode, default\n\n```javascript\nvar bf = new Blowfish(\"secret key\");\nvar encrypted = bf.encrypt(\"secret message\");\nvar decrypted = bf.decrypt(encrypted);\ndecrypted = bf.trimZeros(decrypted); // for string/text information \nconsole.log(decrypted);\n```\n\n### Binary data encryption \n\nIf you want to encrypt **binary data** you must provide\nencrypt function with string length multiple by 8.\n\n**Example:**\n\nInput string for encryption: `\"asdf\"` (4 bytes) is not enough.\nBlowfish want 8-byte string (or 16, 24, 32,...)\n\nSo my lib automaticaly pad string with zeros: `\"asdf\\0\\0\\0\\0\"`\nIf you want to prevent such behaviour you should pad input data to block size.\n\nAdditional info about padding: [Using Padding in Encryption](http://www.di-mgt.com.au/cryptopad.html) (@lucnap) suggested\n\nAfter decryption we will get not `\"asdf\"`, but `\"asdf\\0\\0\\0\\0\"` string.\n\n\n\n\n#### Example 2: CBC mode (better for encrypting long messages and images).\n\nFor CBC you need additional key (CBC Vector) which length should be 8 bytes.\n\n```javascript\nvar bf = new Blowfish(\"key\", \"cbc\");\nvar encrypted = bf.encrypt(\"secret message\", \"cbcvecto\");\nvar decrypted = bf.decrypt(encrypted, \"cbcvecto\");\n```\n\nBlowfish when encrypt produces binary string as result.\nIt's not usable for example, to copy paste. We could encode it\nto base64 text format:\n\n#### Example 3: with base64 encoded output\n\n```javascript\nvar bf = new Blowfish(\"key\");\n\n// Encrypt and encode to base64\nvar encrypted = bf.base64Encode(bf.encrypt(\"secret message\"));\nconsole.log(encrypted);\n\n// Decrypt\nvar encrypted = bf.base64Decode(encrypted);\nvar decrypted = bf.decrypt(encrypted);\n```\n\n\n### Node.js and npm version\n\n**Upd:** 21.07.2018\n\nInstallation:\n\n```bash\n$ npm install agorlov/javascript-blowfish\n```\n\nUsage example:\n\n```javascript\nconst Blowfish = require('javascript-blowfish');\n\nconst key = \"secret key\";\nconst bf = new Blowfish(key);\n\nconsole.log(\"Blowfish encrypt text by key: \" + key);\n\n// Encryption\nconst encrypted = bf.encrypt(\"Secret message. Confidentially!\");\nlet encryptedMime = bf.base64Encode(encrypted);\nconsole.log(encryptedMime);\n\n// Decryption\nconsole.log(\n    'decrypted: ',\n    bf.decrypt(\n        bf.base64Decode(encryptedMime)\n    )\n);\n\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/agorlov/javascript-blowfish.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "types": "Blowfish.node.d.ts",
  "version": "1.0.5"
}
